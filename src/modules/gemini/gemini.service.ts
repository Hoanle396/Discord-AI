import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';

@Injectable()
export class GeminiService {
  private readonly logger = new Logger(GeminiService.name);
  private genAI: GoogleGenerativeAI;

  constructor(private configService: ConfigService) {
    const apiKey = this.configService.get<string>('GEMINI_API_KEY');

    if (!apiKey) {
      this.logger.error('Gemini API key not found in environment variables');
      return;
    }

    this.genAI = new GoogleGenerativeAI(apiKey);
  }

  async generateResponse(prompt: string): Promise<string> {
    try {
      if (!this.genAI) {
        throw new Error('Gemini AI not initialized');
      }

      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

      // Health care context for better responses
      const healthContext = `B·∫°n l√† m·ªôt tr·ª£ l√Ω chƒÉm s√≥c s·ª©c kh·ªèe h·ªØu √≠ch. Vai tr√≤ c·ªßa b·∫°n l√†:
1. Cung c·∫•p th√¥ng tin s·ª©c kh·ªèe v√† chƒÉm s√≥c s·ª©c kh·ªèe t·ªïng qu√°t
2. Gi√∫p ng∆∞·ªùi d√πng theo d√µi d·ªØ li·ªáu s·ª©c kh·ªèe c·ªßa h·ªç
3. Khuy·∫øn kh√≠ch c√°c th√≥i quen l√†nh m·∫°nh
4. Nh·∫Øc nh·ªü ng∆∞·ªùi d√πng tham kh·∫£o √Ω ki·∫øn chuy√™n gia y t·∫ø cho nh·ªØng v·∫•n ƒë·ªÅ nghi√™m tr·ªçng
5. Th·ªÉ hi·ªán s·ª± ƒë·ªìng c·∫£m v√† h·ªó tr·ª£
6. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán

Quan tr·ªçng: Lu√¥n nh·∫Øc nh·ªü ng∆∞·ªùi d√πng r·∫±ng ƒë√¢y ch·ªâ l√† th√¥ng tin t·ªïng qu√°t v√† h·ªç n√™n tham kh·∫£o √Ω ki·∫øn chuy√™n gia y t·∫ø ƒë·ªÉ c√≥ l·ªùi khuy√™n c√° nh√¢n h√≥a.

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${prompt}`;

      const result = await model.generateContent(healthContext);
      const response = await result.response;
      const text = response.text();

      if (!text) {
        throw new Error('Empty response from Gemini AI');
      }

      return text.trim();
    } catch (error) {
      this.logger.error('Error generating response from Gemini AI:', error);
      return 'T√¥i xin l·ªói, nh∆∞ng hi·ªán t·∫°i t√¥i g·∫∑p kh√≥ khƒÉn trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng c√°c l·ªánh c·ª• th·ªÉ c·ªßa bot nh∆∞ `!help` ƒë·ªÉ xem nh·ªØng g√¨ t√¥i c√≥ th·ªÉ l√†m.';
    }
  }

  async generateHealthAdvice(healthData: {
    type: string;
    value: string;
    notes?: string;
  }): Promise<string> {
    try {
      const prompt = `D·ª±a tr√™n d·ªØ li·ªáu s·ª©c kh·ªèe sau, h√£y ƒë∆∞a ra ph·∫£n h·ªìi ng·∫Øn g·ªçn, khuy·∫øn kh√≠ch v·ªõi nh·ªØng l·ªùi khuy√™n chƒÉm s√≥c s·ª©c kh·ªèe t·ªïng qu√°t:
      
Lo·∫°i: ${healthData.type}
Gi√° tr·ªã: ${healthData.value}
Ghi ch√∫: ${healthData.notes || 'Kh√¥ng c√≥'}

Vui l√≤ng ƒë∆∞a ra ph·∫£n h·ªìi h·ªó tr·ª£, ghi nh·∫≠n n·ªó l·ª±c theo d√µi s·ª©c kh·ªèe c·ªßa h·ªç v√† ƒë∆∞a ra l·ªùi khuy√™n chƒÉm s√≥c s·ª©c kh·ªèe t·ªïng qu√°t. Gi·ªØ d∆∞·ªõi 200 t·ª´ v√† tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.`;

      return await this.generateResponse(prompt);
    } catch (error) {
      this.logger.error('Error generating health advice:', error);
      return 'Tuy·ªát v·ªùi khi b·∫°n theo d√µi s·ª©c kh·ªèe c·ªßa m√¨nh! H√£y ti·∫øp t·ª•c duy tr√¨ v√† nh·ªõ tham kh·∫£o √Ω ki·∫øn chuy√™n gia y t·∫ø ƒë·ªÉ c√≥ l·ªùi khuy√™n c√° nh√¢n h√≥a.';
    }
  }

  async generateReminderMessage(reminderType: string): Promise<string> {
    try {
      const prompt = `T·∫°o tin nh·∫Øn nh·∫Øc nh·ªü th√¢n thi·ªán v√† ƒë·ªông vi√™n cho: ${reminderType}. 
      L√†m cho n√≥ khuy·∫øn kh√≠ch v√† ng·∫Øn g·ªçn (d∆∞·ªõi 100 t·ª´). T·∫≠p trung v√†o c√°c kh√≠a c·∫°nh t√≠ch c·ª±c c·ªßa vi·ªác duy tr√¨ s·ª©c kh·ªèe. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.`;

      return await this.generateResponse(prompt);
    } catch (error) {
      this.logger.error('Error generating reminder message:', error);
      return `‚è∞ Nh·∫Øc nh·ªü th√¢n thi·ªán: ${reminderType}. H√£y chƒÉm s√≥c b·∫£n th√¢n! üíö`;
    }
  }
}
